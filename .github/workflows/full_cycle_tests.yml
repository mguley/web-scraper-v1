name: Full Cycle Tests (k8s)

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  full_cycle:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure Docker Daemon
        run: |
          echo '{
            "registry-mirrors": ["https://mirror.gcr.io"]
          }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Set up Kind
        uses: helm/kind-action@v1.0.0
        with:
          version: v0.23.0
          cluster_name: kind
          wait: 300s    

      - name: Retrieve Public IP
        run: |
          PUBLIC_IP=$(curl -s https://api.ipify.org)
          echo "Public IP: $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Build Receiver Docker Image
        run: |
          docker build -t receiver:unique-tag -f test/integration/docker/receiver/Dockerfile .

      - name: Load Receiver Docker Image into Kind
        run: |
          kind load docker-image receiver:unique-tag          

      - name: Create Receiver Deployment and Service
        run: kubectl apply -f .github/workflows/k8s/full/receiver-deployment.yml

      - name: Wait for Receiver Deployment to Be Ready
        run: |
          echo "Waiting for Receiver Deployment to be ready..."
          kubectl wait --namespace default \
            --for=condition=ready pod \
            --selector=app=receiver \
            --timeout=300s     

      - name: Build Tor Proxy Docker Image
        run: |
          docker build -t tor-proxy:unique-tag -f test/integration/docker/tor/Dockerfile test/integration/docker/tor

      - name: Load Tor Proxy Docker Image into Kind
        run: |
          kind load docker-image tor-proxy:unique-tag             

      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc > /dev/null \
          && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list \
          && sudo apt update && sudo apt install ngrok  

      - name: Set ngrok Authtoken
        run: ngrok authtoken ${{ secrets.NGROK_AUTHTOKEN }}          

      - name: Expose Receiver Service with ngrok
        run: |
          kubectl port-forward svc/receiver-service 8080:80 &
          sleep 5
          ngrok http 8080 --log=stdout &
          sleep 10 # Ensure ngrok has started
          NGROK_URL=$(curl --silent --show-error http://127.0.0.1:4040/api/tunnels | jq -r .tunnels[0].public_url)
          echo "Test URL: $NGROK_URL"
          echo "RECEIVER_URL=$NGROK_URL" >> $GITHUB_ENV  

      - name: Verify Test URL
        run: |
          echo "Test URL: ${{ env.RECEIVER_URL }}"
          curl -v ${{ env.RECEIVER_URL }}      

      - name: Deploy RabbitMQ
        run: kubectl apply -f .github/workflows/k8s/rabbitmq-deployment.yml

      - name: Wait for RabbitMQ pod to be ready
        run: |
          echo "Waiting for RabbitMQ pod to be ready..."
          kubectl wait --for=condition=Ready pod -l app=rabbitmq --timeout=240s
          echo "RabbitMQ pod is ready."

      - name: Create RabbitMQ readiness check job
        run: |
          kubectl delete job rabbitmq-readiness-check --ignore-not-found
          kubectl apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: rabbitmq-readiness-check
          spec:
            template:
              spec:
                containers:
                - name: curl
                  image: appropriate/curl
                  command: ["sh", "-c", "curl -u user:pass http://rabbitmq-service:15672/api/overview"]
                restartPolicy: Never
          EOF

      - name: Wait for RabbitMQ readiness check job completion
        run: |
          kubectl wait --for=condition=complete job/rabbitmq-readiness-check --timeout=120s
          kubectl logs job/rabbitmq-readiness-check

      - name: Deploy Tor Proxy
        run: kubectl apply -f .github/workflows/k8s/tor-deployment.yml

      - name: Wait for Tor Proxy pod to be ready
        run: |
          echo "Waiting for Tor Proxy pod to be ready..."
          kubectl wait --for=condition=Ready pod -l app=tor --timeout=120s
          echo "Tor Proxy pod is ready."            

      - name: Build Transmitter Docker Image
        run: |
          docker build -t transmitter:unique-tag -f test/integration/docker/transmitter/Dockerfile .  

      - name: Load Transmitter Docker Image into Kind
        run: |
          kind load docker-image transmitter:unique-tag

      - name: Prepare Transmitter Deployment with ngrok URL
        run: |
          envsubst < .github/workflows/k8s/full/transmitter-deployment-template.yml > .github/workflows/k8s/full/transmitter-deployment.yml          

      - name: Create Transmitter Deployment
        run: kubectl apply -f .github/workflows/k8s/full/transmitter-deployment.yml

      - name: Verify DNS Resolution
        run: |
          kubectl run dnsutils --image=infoblox/dnstools --command -- sleep 3600
          sleep 5
          kubectl exec dnsutils -- nslookup tor-service.default.svc.cluster.local
          kubectl delete pod dnsutils

      - name: Wait for Transmitter Deployment to Be Ready
        run: |
          echo "Waiting for Transmitter Deployment to be ready..."
          kubectl wait --namespace default \
            --for=condition=ready pod \
            --selector=app=transmitter \
            --timeout=300s     

      - name: Fetch Transmitter Logs
        if: always()
        run: |
          kubectl logs $(kubectl get pods --selector=app=transmitter -o jsonpath="{.items[0].metadata.name}") > transmitter_logs.txt
          cat transmitter_logs.txt            

      - name: Debugging - List all pods and services
        if: always()
        run: |
          kubectl get pods --all-namespaces
          kubectl get svc --all-namespaces
          kubectl get ingress --all-namespaces    

      - name: Fetch Receiver Logs
        if: always()
        run: |
          kubectl logs $(kubectl get pods --selector=app=receiver -o jsonpath="{.items[0].metadata.name}")

      - name: Fetch RabbitMQ logs in case of failure
        if: failure()
        run: |
          echo "Fetching RabbitMQ logs..."
          for pod in $(kubectl get pods -l app=rabbitmq -o jsonpath='{.items[*].metadata.name}'); do
            echo "Logs for $pod:"
            kubectl logs $pod --all-containers || true
          done   

      - name: Fetch Tor Proxy logs in case of failure
        if: failure()
        run: |
          echo "Fetching Tor Proxy logs..."
          for pod in $(kubectl get pods -l app=tor -o jsonpath='{.items[*].metadata.name}'); do
            echo "Logs for $pod:"
            kubectl logs $pod --all-containers || true
          done           
