package useragent

import "math/rand"

// CompositeUserAgentGenerator implements the UserAgentGenerator interface by composing multiple generators.
// It randomly selects one of the provided generators to produce a User-Agent string, ensuring variability and
// diversity in the generated User-Agent strings.
//
// Fields:
// - generators []UserAgentGenerator: A slice of UserAgentGenerator instances used to generate User-Agent strings.
// - randSource *rand.Rand: A pointer to a rand.Rand instance used to randomly select a generator.
//
// Methods:
// - NewCompositeUserAgentGenerator: Initializes a new instance of CompositeUserAgentGenerator with the provided generators.
// - Generate: Selects a generator at random and produces a User-Agent string.
type CompositeUserAgentGenerator struct {
	generators []UserAgentGenerator
	randSource *rand.Rand
}

// NewCompositeUserAgentGenerator initializes a new instance of CompositeUserAgentGenerator with the provided generators.
// It sets up the random source for selecting generators.
//
// Parameters:
// - generators []UserAgentGenerator: A slice of UserAgentGenerator instances to be used for generating User-Agent strings.
//
// Returns:
// - *CompositeUserAgentGenerator: A pointer to an instance of CompositeUserAgentGenerator.
func NewCompositeUserAgentGenerator(generators []UserAgentGenerator) *CompositeUserAgentGenerator {
	return &CompositeUserAgentGenerator{
		generators: generators,
		randSource: rand.New(rand.NewSource(rand.Int63())),
	}
}

// Generate selects a UserAgentGenerator at random from the provided generators and produces a User-Agent string.
//
// Returns:
// - string: A User-Agent string generated by one of the randomly selected UserAgentGenerator instances.
func (composite *CompositeUserAgentGenerator) Generate() string {
	gen := composite.generators[composite.randSource.Intn(len(composite.generators))]
	return gen.Generate()
}
